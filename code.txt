MetaLanguage

General process of generationg code

1. Separate grammar definitions, semantic definitions, etc. out of src. Unrecognised code is left for next passes
    1. Tokenize src code based on given classification of symbols:
        Keyword - a predetermined string, separated from other code with non-alphanumeric character
        Grouping - a predetermined character used to group others
        Separator - a predetermined character used to separate others
        Operator - a special characters that have associated with it procedure
        Name - sequence of alphanumeric characters
        None - unclassified character
    Sets of keywords, groupings, separators and operators can be modified through dictionary
    New classes can be added and given symbols in dictionary or regexp to classify strings.
    Tokenization ignores a set of characters, that can be modified through code and c-style comments.
    2. Find...?
    3. PROFIT!!!

2. Generate from separated grammar definitions, semantic definitions, etc. needed data structures.
3. Using those data structures modify existing pipeline to compile earlier unrecognised code.

Program is told to be correct if there is no unrecognised code left after compiling.