g grammar1 ("a","b","c","\"") (A,B,C) (A=>"a"+A,B=>"b"+B) A // ok
g grammar2 ("a","b","c","\\") (A,B,C) (A=>"a"+A,A=>"",B=>"b"+B) A
g grammar3 ("a","b","c") (A,B,C) ("b"+A=>"a"+B,B=>"b"+B) A
g grammar4 ("a","b","c") (A,B,C) ("b"+A=>"a"+B,B=>"b"+B) A
g number ("0","1","2","3","4","5","6","7","8","9") (Literal)
    (Literal => Literal Literal | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "")
    Literal
g ArithmeticExpression (number,"+","-","/","*","(",")")
    (Expression,Operation)
    (Operation => "+" | "-" | "*" | "/",
     Expression => Expression Operation Expression | "(" Expression ")"| number)
    Expression

g grammarDeclSyntax (["a"-"z"], ["0"-"9"], "(", ")", ",", "|", "\"", "=>", "+", "g ")
    (Decl, Id, Ids, Lit, Lits, Rule,  Rules)
    (Id => Id ["0"+"9"] | Id ["a"-"z"] | ["a"-"z"],
     Ids => "(" Ids | "," Id Ids | ")",
     Lit => "\"" Lit | ["a"-"z"] | ["9"-"0"] | "\"",
     Lits => "(" Lits | "," Lit Lits | ")",
     Rule => (Id | Lit) "+" Rule | "=>" Rule | (Id | Lit),
     Rules => "(" Rules | "," Rule Rules | ")",
     Decl => "g " Id Lits "," Ids "," Rules "," Id )
    Decl

a

2+2

k