// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`expressions > function expressions > function 1`] = `
{
  "children": [],
  "data": {
    "relativeIndex": -1,
    "scope": Scope {
      "names": {},
      "scope": [],
    },
  },
  "name": "name",
  "value": "x",
}
`;

exports[`expressions > function expressions > function multiple params 1`] = `
{
  "children": [],
  "data": {
    "relativeIndex": -1,
    "scope": Scope {
      "names": {},
      "scope": [],
    },
  },
  "name": "name",
  "value": "fn",
}
`;

exports[`expressions > function expressions > function with deep shadowed name access 1`] = `
{
  "children": [],
  "data": {
    "relativeIndex": -1,
    "scope": Scope {
      "names": {},
      "scope": [],
    },
  },
  "name": "name",
  "value": "fn",
}
`;

exports[`expressions > function expressions > function with name shadowing 1`] = `
{
  "children": [],
  "data": {
    "relativeIndex": -1,
    "scope": Scope {
      "names": {},
      "scope": [],
    },
  },
  "name": "name",
  "value": "fn",
}
`;

exports[`expressions > function expressions > function with no arg 1`] = `
{
  "children": [],
  "data": {
    "relativeIndex": -1,
    "scope": Scope {
      "names": {},
      "scope": [],
    },
  },
  "name": "name",
  "value": "fn",
}
`;

exports[`expressions > function expressions > function with placeholder arg 1`] = `
{
  "children": [],
  "data": {
    "scope": Scope {
      "names": {},
      "scope": [],
    },
  },
  "name": "placeholder",
}
`;

exports[`expressions > function expressions > function with shadowed name access 1`] = `
{
  "children": [],
  "data": {
    "relativeIndex": -1,
    "scope": Scope {
      "names": {},
      "scope": [],
    },
  },
  "name": "name",
  "value": "fn",
}
`;

exports[`expressions > pattern matching > in function parameters 1`] = `
{
  "children": [],
  "data": {
    "relativeIndex": -1,
    "scope": Scope {
      "names": {},
      "scope": [],
    },
  },
  "name": "name",
  "value": "(",
}
`;

exports[`expressions > structured programming > block mutable variable declaration 1`] = `
{
  "children": [],
  "data": {
    "relativeIndex": -1,
    "scope": Scope {
      "names": {},
      "scope": [],
    },
  },
  "name": "name",
  "value": "{",
}
`;

exports[`expressions > structured programming > block variable declaration 1`] = `
{
  "children": [],
  "data": {
    "relativeIndex": -1,
    "scope": Scope {
      "names": {},
      "scope": [],
    },
  },
  "name": "name",
  "value": "{",
}
`;
